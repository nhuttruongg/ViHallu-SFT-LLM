"""
Streamlit Web Application for Vietnamese Hallucination Detection
Simple and user-friendly interface
"""
import streamlit as st
import requests
import json
from typing import Dict, Optional
import time

# ==============================================================================
# PAGE CONFIG
# ==============================================================================
st.set_page_config(
    page_title="Vietnamese Hallucination Detector",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ==============================================================================
# CUSTOM CSS
# ==============================================================================
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 2rem;
    }
    .result-box {
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        color: #FAFAFA; /* Light text color */
    }
    .no-hallucination {
        background-color: #2E7D32; /* Darker Green */
        border-left: 5px solid #4CAF50;
    }
    .intrinsic-hallucination {
        background-color: #C62828; /* Darker Red */
        border-left: 5px solid #F44336;
    }
    .extrinsic-hallucination {
        background-color: #FF8F00; /* Darker Amber */
        border-left: 5px solid #FF9800;
    }
    .metric-card {
        background-color: #333333; /* Dark Gray */
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        color: #FAFAFA; /* Light text color */
    }
    .example-box {
        background-color: #424242; /* Medium-Dark Gray */
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# ==============================================================================
# API CLIENT
# ==============================================================================
class HallucinationDetectorClient:
    """Client to call Modal inference API"""
    
    def __init__(self, api_url: str):
        self.api_url = api_url
    
    def predict(
        self,
        context: str,
        prompt: str,
        response: str,
        prompt_type: Optional[str] = None,
        return_probabilities: bool = True
    ) -> Dict:
        """Call prediction API"""
        
        payload = {
            "context": context,
            "prompt": prompt,
            "response": response,
            "prompt_type": prompt_type,
            "return_probabilities": return_probabilities
        }
        
        try:
            response = requests.post(
                f"{self.api_url}/predict",
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"‚ùå API Error: {str(e)}")
            return None

# ==============================================================================
# EXAMPLE DATA
# ==============================================================================
EXAMPLES = {
    "Kh√¥ng c√≥ ·∫£o gi√°c (No Hallucination)": {
        "context": "H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa Vi·ªát Nam t·ª´ nƒÉm 1010. Th√†nh ph·ªë n·∫±m ·ªü ƒë·ªìng b·∫±ng s√¥ng H·ªìng, c√≥ di·ªán t√≠ch 3.344 km¬≤ v√† d√¢n s·ªë kho·∫£ng 8 tri·ªáu ng∆∞·ªùi. H√† N·ªôi n·ªïi ti·∫øng v·ªõi nhi·ªÅu di t√≠ch l·ªãch s·ª≠ nh∆∞ VƒÉn Mi·∫øu, Ho√†ng th√†nh ThƒÉng Long.",
        "prompt": "H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa n∆∞·ªõc n√†o?",
        "response": "H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa Vi·ªát Nam.",
        "prompt_type": "factual"
    },
    "·∫¢o gi√°c n·ªôi t·∫°i (Intrinsic)": {
        "context": "H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa Vi·ªát Nam t·ª´ nƒÉm 1010. TP. H·ªì Ch√≠ Minh l√† th√†nh ph·ªë l·ªõn nh·∫•t Vi·ªát Nam v·ªÅ d√¢n s·ªë v√† kinh t·∫ø.",
        "prompt": "Th√†nh ph·ªë n√†o l√† th·ªß ƒë√¥ c·ªßa Vi·ªát Nam?",
        "response": "TP. H·ªì Ch√≠ Minh l√† th·ªß ƒë√¥ c·ªßa Vi·ªát Nam.",
        "prompt_type": "factual"
    },
    "·∫¢o gi√°c ngo·∫°i t·∫°i (Extrinsic)": {
        "context": "H√† N·ªôi l√† th·ªß ƒë√¥ c·ªßa Vi·ªát Nam. Th√†nh ph·ªë c√≥ nhi·ªÅu di t√≠ch l·ªãch s·ª≠.",
        "prompt": "D√¢n s·ªë H√† N·ªôi l√† bao nhi√™u?",
        "response": "H√† N·ªôi c√≥ d√¢n s·ªë kho·∫£ng 8 tri·ªáu ng∆∞·ªùi v√†o nƒÉm 2023.",
        "prompt_type": "factual"
    },
    "Th√¥ng tin v·ªÅ ·∫©m th·ª±c": {
        "context": "Ph·ªü l√† m√≥n ƒÉn truy·ªÅn th·ªëng c·ªßa Vi·ªát Nam, c√≥ ngu·ªìn g·ªëc t·ª´ B·∫Øc B·ªô. Ph·ªü ƒë∆∞·ª£c l√†m t·ª´ b√°nh ph·ªü, n∆∞·ªõc d√πng h·∫ßm t·ª´ x∆∞∆°ng, th·ªãt b√≤ ho·∫∑c g√†, v√† c√°c gia v·ªã nh∆∞ h√†nh, ng√≤, h·∫°t ti√™u.",
        "prompt": "Ph·ªü ƒë∆∞·ª£c l√†m t·ª´ nh·ªØng nguy√™n li·ªáu g√¨?",
        "response": "Ph·ªü ƒë∆∞·ª£c l√†m t·ª´ b√°nh ph·ªü, n∆∞·ªõc d√πng t·ª´ x∆∞∆°ng, th·ªãt (b√≤ ho·∫∑c g√†), h√†nh, ng√≤ v√† c√°c gia v·ªã.",
        "prompt_type": "factual"
    },
}

# ==============================================================================
# MAIN APP
# ==============================================================================
def main():
    # Header
    st.markdown('<p class="main-header">üîç Vietnamese Hallucination Detector</p>', unsafe_allow_html=True)
    st.markdown("### Ph√°t hi·ªán ·∫£o gi√°c (hallucination) trong c√¢u tr·∫£ l·ªùi c·ªßa m√¥ h√¨nh ng√¥n ng·ªØ")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        
        # API URL
        api_url = st.text_input(
            "API URL",
            value="https://nhuttruongg--vihallu-inference-fastapi-app.modal.run",  # Replace with your Modal URL
            help="URL c·ªßa Modal inference endpoint"
        )
        
        # Prompt type
        prompt_type = st.selectbox(
            "Lo·∫°i c√¢u h·ªèi",
            ["factual", "noisy", "adversarial", None],
            index=0,
            help="Lo·∫°i c√¢u h·ªèi: factual (s·ª± th·∫≠t), noisy (nhi·ªÖu), adversarial (ƒë·ªëi kh√°ng)"
        )
        
        st.divider()
        
        # Information
        st.header("‚ÑπÔ∏è Th√¥ng tin")
        st.markdown("""
        **Ba lo·∫°i ·∫£o gi√°c:**
        
        - **No (Kh√¥ng)**: C√¢u tr·∫£ l·ªùi nh·∫•t qu√°n v·ªõi ng·ªØ c·∫£nh
        - **Intrinsic (N·ªôi t·∫°i)**: C√¢u tr·∫£ l·ªùi m√¢u thu·∫´n v·ªõi ng·ªØ c·∫£nh
        - **Extrinsic (Ngo·∫°i t·∫°i)**: C√¢u tr·∫£ l·ªùi c√≥ th√¥ng tin ngo√†i ng·ªØ c·∫£nh
        
        **Model**: VinAllama-7B + LoRA  
        **Task**: 3-class classification
        """)
        
        st.divider()
        
        # Statistics
        if 'prediction_count' in st.session_state:
            st.header("üìä Th·ªëng k√™")
            st.metric("S·ªë l·∫ßn d·ª± ƒëo√°n", st.session_state.prediction_count)
            st.metric("Th·ªùi gian TB", f"{st.session_state.avg_time:.2f}s")
    
    # Initialize session state
    if 'prediction_count' not in st.session_state:
        st.session_state.prediction_count = 0
        st.session_state.total_time = 0
        st.session_state.avg_time = 0
    
    # Main content
    tab1, tab2, tab3 = st.tabs(["üéØ D·ª± ƒëo√°n", "üìö V√≠ d·ª•", "üìñ H∆∞·ªõng d·∫´n"])
    
    # ===== TAB 1: PREDICTION =====
    with tab1:
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üìù ƒê·∫ßu v√†o")
            
            context = st.text_area(
                "Ng·ªØ c·∫£nh (Context)",
                height=150,
                placeholder="Nh·∫≠p th√¥ng tin n·ªÅn t·∫£ng, ng·ªØ c·∫£nh...",
                help="VƒÉn b·∫£n ch·ª©a th√¥ng tin n·ªÅn"
            )
            
            prompt = st.text_input(
                "C√¢u h·ªèi (Prompt)",
                placeholder="Nh·∫≠p c√¢u h·ªèi...",
                help="C√¢u h·ªèi ƒë∆∞·ª£c ƒë·∫∑t ra"
            )
            
            response = st.text_area(
                "C√¢u tr·∫£ l·ªùi (Response)",
                height=100,
                placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi c·∫ßn ki·ªÉm tra...",
                help="C√¢u tr·∫£ l·ªùi c·ªßa m√¥ h√¨nh c·∫ßn ƒë√°nh gi√°"
            )
            
            col_btn1, col_btn2 = st.columns([1, 1])
            
            with col_btn1:
                predict_btn = st.button("üîç Ph√°t hi·ªán", type="primary", use_container_width=True)
            
            with col_btn2:
                clear_btn = st.button("üóëÔ∏è X√≥a", use_container_width=True)
            
            if clear_btn:
                st.rerun()
        
        with col2:
            st.subheader("üéØ K·∫øt qu·∫£")
            
            if predict_btn:
                if not context or not prompt or not response:
                    st.error("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                else:
                    with st.spinner("üîÑ ƒêang ph√¢n t√≠ch..."):
                        # Call API
                        client = HallucinationDetectorClient(api_url)
                        
                        start_time = time.time()
                        result = client.predict(
                            context=context,
                            prompt=prompt,
                            response=response,
                            prompt_type=prompt_type if prompt_type != "None" else None,
                            return_probabilities=True
                        )
                        elapsed_time = time.time() - start_time
                        
                        if result:
                            # Update statistics
                            st.session_state.prediction_count += 1
                            st.session_state.total_time += elapsed_time
                            st.session_state.avg_time = st.session_state.total_time / st.session_state.prediction_count
                            
                            # Display result
                            label = result['label']
                            confidence = result.get('confidence', 0) * 100
                            
                            # Result box with color coding
                            if label == "no":
                                box_class = "no-hallucination"
                                emoji = "‚úÖ"
                                title = "Kh√¥ng ph√°t hi·ªán ·∫£o gi√°c"
                            elif label == "intrinsic":
                                box_class = "intrinsic-hallucination"
                                emoji = "‚ö†Ô∏è"
                                title = "·∫¢o gi√°c n·ªôi t·∫°i"
                            else:
                                box_class = "extrinsic-hallucination"
                                emoji = "‚ö†Ô∏è"
                                title = "·∫¢o gi√°c ngo·∫°i t·∫°i"
                            
                            st.markdown(f"""
                            <div class="result-box {box_class}">
                                <h3>{emoji} {title}</h3>
                                <p><strong>ƒê·ªô tin c·∫≠y:</strong> {confidence:.1f}%</p>
                                <p>{result.get('explanation', '')}</p>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # Metrics
                            col_m1, col_m2, col_m3 = st.columns(3)
                            
                            with col_m1:
                                st.markdown(f"""
                                <div class="metric-card">
                                    <h4>{label.upper()}</h4>
                                    <p>Nh√£n d·ª± ƒëo√°n</p>
                                </div>
                                """, unsafe_allow_html=True)
                            
                            with col_m2:
                                st.markdown(f"""
                                <div class="metric-card">
                                    <h4>{confidence:.1f}%</h4>
                                    <p>ƒê·ªô tin c·∫≠y</p>
                                </div>
                                """, unsafe_allow_html=True)
                            
                            with col_m3:
                                st.markdown(f"""
                                <div class="metric-card">
                                    <h4>{elapsed_time:.2f}s</h4>
                                    <p>Th·ªùi gian x·ª≠ l√Ω</p>
                                </div>
                                """, unsafe_allow_html=True)
                            
                            # Probability distribution
                            if result.get('probabilities'):
                                st.subheader("üìä Ph√¢n b·ªë x√°c su·∫•t")
                                
                                probs = result['probabilities']
                                
                                import pandas as pd
                                df_probs = pd.DataFrame({
                                    'Nh√£n': ['No', 'Intrinsic', 'Extrinsic'],
                                    'X√°c su·∫•t': [
                                        probs['no'] * 100,
                                        probs['intrinsic'] * 100,
                                        probs['extrinsic'] * 100
                                    ]
                                })
                                
                                st.bar_chart(df_probs.set_index('Nh√£n'))
                                
                                # Detailed probabilities
                                with st.expander("Chi ti·∫øt x√°c su·∫•t"):
                                    for label_name, prob in probs.items():
                                        st.progress(prob, text=f"{label_name}: {prob*100:.2f}%")
    
    # ===== TAB 2: EXAMPLES =====
    with tab2:
        st.subheader("üìö C√°c v√≠ d·ª• m·∫´u")
        st.markdown("Click v√†o v√≠ d·ª• ƒë·ªÉ t·∫£i v√†o form d·ª± ƒëo√°n")
        
        for example_name, example_data in EXAMPLES.items():
            with st.expander(f"üìÑ {example_name}"):
                st.markdown(f"**Ng·ªØ c·∫£nh:** {example_data['context']}")
                st.markdown(f"**C√¢u h·ªèi:** {example_data['prompt']}")
                st.markdown(f"**C√¢u tr·∫£ l·ªùi:** {example_data['response']}")
                
                if st.button(f"T·∫£i v√≠ d·ª• n√†y", key=f"load_{example_name}"):
                    st.session_state.loaded_example = example_data
                    st.rerun()
        
        # Load example if selected
        if 'loaded_example' in st.session_state:
            st.success("‚úÖ ƒê√£ t·∫£i v√≠ d·ª•! Chuy·ªÉn sang tab 'D·ª± ƒëo√°n' ƒë·ªÉ th·ª≠ nghi·ªám.")
    
    # ===== TAB 3: GUIDE =====
    with tab3:
        st.subheader("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        
        st.markdown("""
        ### C√°ch s·ª≠ d·ª•ng
        
        1. **C·∫•u h√¨nh API**: Nh·∫≠p URL c·ªßa Modal inference endpoint v√†o sidebar
        2. **Nh·∫≠p d·ªØ li·ªáu**:
           - **Ng·ªØ c·∫£nh**: Th√¥ng tin n·ªÅn, vƒÉn b·∫£n tham kh·∫£o
           - **C√¢u h·ªèi**: C√¢u h·ªèi ƒë∆∞·ª£c ƒë·∫∑t ra cho m√¥ h√¨nh
           - **C√¢u tr·∫£ l·ªùi**: C√¢u tr·∫£ l·ªùi c·ªßa m√¥ h√¨nh c·∫ßn ki·ªÉm tra
        3. **Ch·ªçn lo·∫°i c√¢u h·ªèi** (t√πy ch·ªçn): factual, noisy, ho·∫∑c adversarial
        4. **Click "Ph√°t hi·ªán"** ƒë·ªÉ ph√¢n t√≠ch
        
        ### Gi·∫£i th√≠ch k·∫øt qu·∫£
        
        #### ‚úÖ No (Kh√¥ng c√≥ ·∫£o gi√°c)
        - C√¢u tr·∫£ l·ªùi **nh·∫•t qu√°n** v·ªõi th√¥ng tin trong ng·ªØ c·∫£nh
        - Kh√¥ng c√≥ th√¥ng tin sai l·ªách ho·∫∑c th·ª´a
        - ƒê√¢y l√† c√¢u tr·∫£ l·ªùi mong mu·ªën
        
        #### ‚ö†Ô∏è Intrinsic (·∫¢o gi√°c n·ªôi t·∫°i)
        - C√¢u tr·∫£ l·ªùi **m√¢u thu·∫´n** v·ªõi ng·ªØ c·∫£nh
        - Th√¥ng tin trong c√¢u tr·∫£ l·ªùi **tr√°i ng∆∞·ª£c** v·ªõi s·ª± th·∫≠t trong ng·ªØ c·∫£nh
        - V√≠ d·ª•: Ng·ªØ c·∫£nh n√≥i "A l√† B" nh∆∞ng tr·∫£ l·ªùi "A l√† C"
        
        #### ‚ö†Ô∏è Extrinsic (·∫¢o gi√°c ngo·∫°i t·∫°i)
        - C√¢u tr·∫£ l·ªùi ch·ª©a th√¥ng tin **kh√¥ng c√≥** trong ng·ªØ c·∫£nh
        - M√¥ h√¨nh "t∆∞·ªüng t∆∞·ª£ng" ra th√¥ng tin m·ªõi
        - Th√¥ng tin c√≥ th·ªÉ ƒë√∫ng trong th·ª±c t·∫ø nh∆∞ng kh√¥ng c√≥ trong ng·ªØ c·∫£nh
        
        ### V√≠ d·ª• minh h·ªça
        
        **No Hallucination:**
        - Context: "H√† N·ªôi l√† th·ªß ƒë√¥ Vi·ªát Nam"
        - Prompt: "Th·ªß ƒë√¥ VN l√† g√¨?"
        - Response: "H√† N·ªôi l√† th·ªß ƒë√¥ Vi·ªát Nam" ‚úÖ
        
        **Intrinsic:**
        - Context: "H√† N·ªôi l√† th·ªß ƒë√¥ Vi·ªát Nam"
        - Prompt: "Th·ªß ƒë√¥ VN l√† g√¨?"
        - Response: "S√†i G√≤n l√† th·ªß ƒë√¥ Vi·ªát Nam" ‚ùå
        
        **Extrinsic:**
        - Context: "H√† N·ªôi l√† m·ªôt th√†nh ph·ªë"
        - Prompt: "D√¢n s·ªë H√† N·ªôi?"
        - Response: "H√† N·ªôi c√≥ 8 tri·ªáu d√¢n" ‚ö†Ô∏è (kh√¥ng c√≥ trong context)
        
        ### L∆∞u √Ω
        
        - Model ƒë∆∞·ª£c train tr√™n dataset ti·∫øng Vi·ªát
        - ƒê·ªô ch√≠nh x√°c ph·ª• thu·ªôc v√†o ch·∫•t l∆∞·ª£ng ng·ªØ c·∫£nh
        - V·ªõi c√¢u tr·∫£ l·ªùi ph·ª©c t·∫°p, h√£y xem x√©t x√°c su·∫•t c√°c nh√£n
        """)

if __name__ == "__main__":
    main()